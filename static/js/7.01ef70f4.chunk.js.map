{"version":3,"sources":["pages/Product/Product.js"],"names":["Product","props","useState","cache","results","setResults","push","useHistory","query","useParams","dispatch","useDispatch","useEffect","products","bestbuy","then","data","console","log","setCache","setLastSearchText","catch","err","warn","style","justifyContent","className","display","flexWrap","map","prod","index","backgroundColor","margin","width","border","cursor","src","largeImage","alt","name","onClick","ev","shiftKey","type","payload","setSlideshowIndex","sku","handleClick","customerReviewCount","customerReviewAverage","customerTopRated"],"mappings":"4LAuGeA,UAnFf,SAAiBC,GAChB,MAA8BC,mBAASD,EAAME,OAA7C,mBAAOC,EAAP,KAAgBC,EAAhB,KAEQC,EAASC,cAATD,KACAE,EAAUC,cAAVD,MAEFE,EAAWC,cAuCjB,OA1BAC,qBAAU,WACLX,EAAME,MAAMU,WAQhBR,EAAW,IAMXS,IACoBN,GAClBO,MAAK,SAACC,GACNC,QAAQC,IAAI,OAAQF,GACpBX,EAAWW,GACXf,EAAMkB,SAASH,GACff,EAAMmB,kBAAkBZ,MAExBa,OAAM,SAACC,GAAD,OAASL,QAAQM,KAAK,4BAA6BD,SACzD,CAACd,IAGH,gCACC,qBAAIgB,MAAO,CAAEC,eAAgB,UAA7B,0BAAuDjB,EAAvD,OACA,qBACCkB,UAAU,cACVF,MAAO,CAAEG,QAAS,OAAQC,SAAU,OAAQH,eAAgB,UAC5D,cAAY,mBAHb,SAIE,aAAcrB,EACdA,EAAQS,SAASgB,KAAI,SAACC,EAAMC,GAAP,OACpB,sBACCP,MAAO,CACNQ,gBAAiB,QACjBC,OAAQ,GACRC,MAAO,IACPT,eAAgB,SAChBU,OAAQ,iBACRC,OAAQ,WAPV,UAUC,8BACC,qBAAKC,IAAKP,EAAKQ,WAAYC,IAAKT,EAAKU,KAAMC,QAAS,SAACC,GAAD,OAzD3D,SAAqBA,EAAI7B,EAAUkB,GAClCd,QAAQC,IAAI,KAAMwB,EAAI7B,EAAUkB,GAC5BW,EAAGC,SACNjC,EAAS,CAAEkC,KAAM,iBAAkBC,QAAShC,KAI7CZ,EAAM6C,kBAAkBf,GACxBzB,EAAK,kBAAD,OAAmBO,EAASkC,OAiDkCC,CAAYN,EAAIZ,EAAMC,QAEnF,gCAAMD,EAAKU,KAAX,OACA,uBACA,2CACUV,EAAKmB,oBADf,gBACiDnB,EAAKoB,sBADtD,iBAC2F,IACzFpB,EAAKqB,sBARFpB,MAaP","file":"static/js/7.01ef70f4.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n// Another way to import - this means \"take all the named exports from this\r\n// file and make them into properties of a single object, which will live in\r\n// the variable called \"bestbuy\" (could be named anything)\r\n// Then to use them, you would write:\r\n//\r\n//    bestbuy.getImageURL( aPhotoObject );\r\n//\r\n// This makes it a bit clearer in your code where 'getImageURL' comes from,\r\n// which is especially helpful for custom library files - it's not as\r\n// important for imported functions like 'useState()' because they are more\r\n// familiar core functions of the React framework.\r\nimport * as bestbuy from \"../../lib/bestbuy\";\r\nimport \"./Product.css\";\r\n\r\n// import Thumbnail from \"./Thumbnail\";\r\n\r\nfunction Product(props) {\r\n\tconst [results, setResults] = useState(props.cache); // for storing API response data - defaults to cache data\r\n\r\n\tconst { push } = useHistory();\r\n\tconst { query } = useParams(); //instead of needing router props! i.e. can render this comp as child of <Route>\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tfunction handleClick(ev, products, index) {\r\n\t\tconsole.log(\"ev\", ev, products, index);\r\n\t\tif (ev.shiftKey) {\r\n\t\t\tdispatch({ type: \"favourites/add\", payload: products });\r\n\t\t\t// ev.stopPropagation();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tprops.setSlideshowIndex(index); // for slideshow navigation, so we know relative position of this image in  results\r\n\t\tpush(`/productDetail/${products.sku}`);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (props.cache.products) {\r\n\t\t\t// Early return if cache is available, i.e. prevent the\r\n\t\t\t// fetching of new results; the cache will be used by default\r\n\t\t\t// unless we run the fetch(), because we have given props.cache\r\n\t\t\t// to useState() above to use as the default value for 'results'\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetResults({}); // clear the results so we don't see old results while new ones are loading (we'll see loading message)\r\n\r\n\t\t// fetch( SEARCH_URL + query )\r\n\t\t//   .then( response => response.json() )\r\n\t\t// ðŸ‘†The .json() call now happens internally in our library, which returns the next promise to us\r\n\t\t// (i.e. the promise with the results of the .json(), i.e. the actual data)\r\n\t\tbestbuy\r\n\t\t\t.getProductResults(query)\r\n\t\t\t.then((data) => {\r\n\t\t\t\tconsole.log(\"JSON\", data);\r\n\t\t\t\tsetResults(data); // update the local results state for this component\r\n\t\t\t\tprops.setCache(data); // update the cache in the parent <App>\r\n\t\t\t\tprops.setLastSearchText(query); // ask parent to remember query for 'back' functionality in slideshow\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.warn(\"error making API request:\", err));\r\n\t}, [query]); // \"Listen for changes to this prop and run the useEffect callback function if it changes\"\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2 style={{ justifyContent: \"center\" }}>Results for \"{query}\"</h2>\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"resultsList\"\r\n\t\t\t\tstyle={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\r\n\t\t\t\tdata-testid=\"searchThumbnails\">\r\n\t\t\t\t{\"products\" in results ? (\r\n\t\t\t\t\tresults.products.map((prod, index) => (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tbackgroundColor: \"white\",\r\n\t\t\t\t\t\t\t\tmargin: 20,\r\n\t\t\t\t\t\t\t\twidth: 220,\r\n\t\t\t\t\t\t\t\tjustifyContent: \"center\",\r\n\t\t\t\t\t\t\t\tborder: \"1px solid grey\",\r\n\t\t\t\t\t\t\t\tcursor: \"pointer\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tkey={index}>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<img src={prod.largeImage} alt={prod.name} onClick={(ev) => handleClick(ev, prod, index)} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div>{prod.name} </div>\r\n\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\tReview: {prod.customerReviewCount} || Average: {prod.customerReviewAverage} || Top Rated:{\" \"}\r\n\t\t\t\t\t\t\t\t{prod.customerTopRated}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div> // TODO: move this to separate component\r\n\t\t\t\t\t))\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<p>Loading results...</p>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n} // Product()\r\n\r\nexport default Product;\r\n"],"sourceRoot":""}